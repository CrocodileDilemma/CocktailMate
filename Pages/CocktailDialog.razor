@inject IDialogService _dialogService
@inject ISnackbar _snack
@inject CocktailService _service

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.LocalDrink" Class="mr-3 mb-n1" />
            @drink.strDrink
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="3">
                        <MudImage Src="@drink.strDrinkThumb" Height="200" ObjectFit="ObjectFit.Cover" Class="rounded-lg" ObjectPosition="ObjectPosition.Bottom"/>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Typo="Typo.subtitle1">Information</MudText>
                        <ChipContent Drink=@drink />
                        <MudText Typo="Typo.subtitle1">Ingredients</MudText>
                        @foreach (var i in ingredients)
                        {
                            <MudChip Icon="@Icons.Material.Filled.Info" Color="Color.Secondary" OnClick="@(() => HandleIngredient(i.Key))">@_service.GetIngredientText(i)</MudChip>
                        }
                    </MudItem>
                </MudGrid>
                <MudText Typo="Typo.subtitle1">Instructions</MudText>
                <MudPaper Class="mud-width-full" Outlined="true">
                    <MudAlert Severity="Severity.Success" NoIcon="true">@drink.strInstructions</MudAlert>
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance dialog { get; set; }
    [Parameter] public Drink drink { get; set; }
    private Dictionary<string, string> ingredients = new();

    protected override void OnParametersSet()
    {
        ingredients = _service.GetIngredients(drink);
    }

    private async Task HandleIngredient(string ingredient)
    {
        var result = await _service.GetIngredient(ingredient);
        if (result.IsError)
        {
            _snack.Add(result.FirstError.Description, Severity.Error);
            return;
        }

        var parameters = new DialogParameters();
        parameters.Add("Ingredient", result.Value);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        _dialogService.Show<IngredientDialog>(result.Value.strIngredient, parameters, options);
    }
}